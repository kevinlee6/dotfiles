#!/bin/bash
# .fzf.bash (autogenerated from fzf installation) is sourced at end of file.
# If fd or bat is missing, there will be no colorized output.

# local fn: either file (f) or directory (d)
function make_find_cmd {
  if [ -x $(command -v fd) ]; then
    echo "fd -t $1 --hidden --follow --exclude .git"
  else
    echo "find -type $1 -follow -not -path '*\.git*'"
  fi
}
# local fn: provide a preview-cmd for window when fuzzy searching files.
function make_preview_cmd {
  if [ -x "$(command -v bat)" ]; then
    echo 'bat --style=numbers --color=always {}'
  elif [ -x "$(command -v cat)" ]; then
    echo 'cat {}'
  else
    echo 'head -50'
  fi
}
preview=$(make_preview_cmd)
# local fn: Takes a preview argument and "returns" a string
function make_fzf_opts {
  local right=$([ -z "$2" ] && echo '60%' || echo "$2")
  echo "--height 40% --reverse --preview '$1' --preview-window right:$right"
}

ls_type='--color=always'
case $OSTYPE in
  darwin*) ls_type='-FGH' ;;
esac

export FZF_DEFAULT_COMMAND="$(make_find_cmd 'f')"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS=$(make_fzf_opts "$preview")
export FZF_ALT_C_COMMAND="$(make_find_cmd 'd')"
export FZF_ALT_C_OPTS=$(make_fzf_opts "ls $ls_type {}" '25%')

fzf_opts="$(make_fzf_opts "$preview")"
# Directly open file from fzf w/ Ctrl-p
function fzf_then_open_in_editor {
  # How to avoid eval without hard coding? If anything, FZF source code also uses eval.
  local file=$(eval fzf "$fzf_opts")
  [ -f "$file" ] && ${EDITOR:-vim} "$file"
}
bind -x '"\C-p": fzf_then_open_in_editor'

# Open a file starting from home directory, mapped to C-g
function fzf_global_open {
  (cd ~; fzf_then_open_in_editor)
}
bind -x '"\C-g": fzf_global_open'

# Bind global cd to Alt-g
# Method called in .inputrc bc need to refresh readline
function fzf_global_cd {
  local dir=$(cd ~; echo $(eval "$FZF_ALT_C_COMMAND" | eval fzf "$FZF_ALT_C_OPTS"))
  [ -n "$dir" ] && [ -d "$HOME/$dir" ] && cd "$HOME/$dir"
}

if [ -x "$(command -v git)" ]; then
  # Fzf for git branches
  function fbr {
    local branches branch
    branches=$(git --no-pager branch -vv) &&
      branch=$(echo "$branches" | fzf --height 40% +m) &&
      git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
  }
  function gco {
    if [ -z "$1" ]; then
      fbr
    else
      git checkout "$@"
    fi
  }
fi

[ -r ~/.fzf.bash ] && source ~/.fzf.bash
# Remove "local" functions so it doesn't pollute global scope.
unset -f make_fzf_opts
unset -f make_find_cmd
unset -f make_preview_cmd
